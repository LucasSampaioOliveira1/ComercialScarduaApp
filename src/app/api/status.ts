import { NextApiRequest, NextApiResponse } from "next";
import { prisma } from "@/lib/prisma";
import jwt from "jsonwebtoken";

const SECRET_KEY = process.env.JWT_SECRET || "bd0a3f00b453f0a4e3f64afd92c12777997044d1d00d8832cbd92b57f7f4899c";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log("üöÄ Requisi√ß√£o recebida para verificar status do usu√°rio.");

  // Verifica se o m√©todo da requisi√ß√£o √© GET, caso contr√°rio, retorna 405
  if (req.method !== "GET") {
    return res.status(405).json({ message: "M√©todo n√£o permitido" });
  }

  try {
    const token = req.headers.authorization?.replace("Bearer ", "");

    // Verifica se o token foi fornecido
    if (!token) {
      console.warn("‚ö†Ô∏è Token n√£o fornecido.");
      return res.status(401).json({ message: "Token n√£o fornecido" });
    }

    let decoded;
    // Tenta decodificar o token
    try {
      decoded = jwt.verify(token, SECRET_KEY) as { id: string };
      console.log("üîë Token decodificado:", decoded);
    } catch (error) {
      console.error("‚õî Token inv√°lido ou expirado:", error);
      return res.status(401).json({ message: "Token inv√°lido ou expirado" });
    }

    // Busca o usu√°rio no banco de dados com base no id extra√≠do do token
    const user = await prisma.user.findUnique({ where: { id: decoded.id } });

    // Se o usu√°rio n√£o for encontrado
    if (!user) {
      console.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado no banco.");
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado" });
    }

    // Loga as informa√ß√µes do usu√°rio encontrado
    console.log("‚úÖ Usu√°rio encontrado:", { id: user.id, role: user.role });

    // Verifica se o usu√°rio tem a role de ADMIN
    const isAdmin = user.role === "ADMIN";
    return res.status(200).json({ isAdmin });
    
  } catch (error) {
    // Caso ocorra um erro inesperado
    console.error("üî• Erro interno no servidor:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
}